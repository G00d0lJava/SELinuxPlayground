#!/usr/sbin/nft -f

table inet labeling {
	secmark unlabeled_secmark {
		"system_u:object_r:unlabeled_t:s0"
	}
	secmark ssh_server {
		"system_u:object_r:ssh_server_packet_t:s0"
	}
	secmark tracert_client {
		"system_u:object_r:traceroute_client_packet_t:s0"
	}
	secmark tracert_server {
		"system_u:object_r:traceroute_server_packet_t:s0"
	}
	secmark http_client {
		"system_u:object_r:http_client_packet_t:s0"
	}
	secmark http_server {
		"system_u:object_r:http_server_packet_t:s0"
	}
	secmark dns_client {
		"system_u:object_r:dns_client_packet_t:s0"
	}
	secmark ntp_client {
		"system_u:object_r:ntp_client_packet_t:s0"
	}
	chain input {
		type filter hook input priority filter;
		# Define SECMARK of packet of newly discovered connection
		# SSH
		ct state new tcp dport ssh meta secmark set "ssh_server"
		ct state new udp dport ssh meta secmark set "ssh_server"
		ct state new sctp dport ssh meta secmark set "ssh_server"
		# HTTP 
		ct state new tcp sport { http, https } meta secmark set "http_client"
		ct state new udp sport { http, https } meta secmark set "http_client"
		ct state new sctp sport { http, https } meta secmark set "http_client"
		ct state new tcp dport 8080 meta secmark set "http_server"
		ct state new udp dport 8080 meta secmark set "http_server"
		ct state new sctp dport 8080 meta secmark set "http_server"
		# DNS
		ct state new tcp sport { 53, 853 } meta secmark set "dns_client"
		ct state new udp sport { 53, 853 } meta secmark set "dns_client"
		# NTP
		ct state new tcp sport ntp meta secmark set "ntp_client"
		ct state new udp sport ntp meta secmark set "ntp_client"
		# Label connections and subsequent packages
		jump connections
		# A ping with a TTL smaller or equal to 1 is understood as an attempt to do a traceroute
		ip protocol icmp icmp type echo-request ip ttl le 1 meta secmark set "tracert_server"
		# Ping responses to subnet are seen as responses to a traceroute
		ip protocol icmp icmp type echo-reply ip saddr 192.168.2.0/24 meta secmark set "tracert_client"
		# Logging for debugging
		tcp dport { ssh, 8080 } limit rate 10/second log flags all prefix "[SECMARK TEST]"
		udp dport { ssh, 8080 } limit rate 10/second log flags all prefix "[SECMARK TEST]"
		sctp dport { ssh, 8080 } limit rate 10/second log flags all prefix "[SECMARK TEST]"
		tcp sport { http, https, 53, 853, ntp } limit rate 10/second log flags all prefix "[SECMARK TEST]"
		udp sport { http, https, 53, 853, ntp } limit rate 10/second log flags all prefix "[SECMARK TEST]"
		sctp sport { http, https } limit rate 10/second log flags all prefix "[SECMARK TEST]"
		ip protocol icmp icmp type echo-reply ip saddr 192.168.2.0/24 limit rate 10/second log flags all prefix "[SECMARK TEST]"
		ip protocol icmp icmp type echo-request ip ttl le 1 meta secmark set "tracert_server" limit rate 10/second log flags all prefix "[SECMARK TEST]"

	}
	chain output {
		type filter hook output priority filter;
		# Define SECMARK of packet of newly discovered connection
		# SSH
		ct state new tcp sport ssh meta secmark set "ssh_server"
		ct state new udp sport ssh meta secmark set "ssh_server"
		ct state new sctp sport ssh meta secmark set "ssh_server"
		# HTTP
		ct state new tcp dport {http, https, 8080} meta secmark set "http_client"
		ct state new udp dport {http, https, 8080} meta secmark set "http_client"
		ct state new sctp dport {http, https, 8080} meta secmark set "http_client"
		# DNS
		ct state new tcp dport { 53, 853 } meta secmark set "dns_client"
		ct state new udp dport { 53, 853 } meta secmark set "dns_client"
		# NTP
		ct state new tcp dport ntp meta secmark set "ntp_client"
		ct state new udp dport ntp meta secmark set "ntp_client"
		# Label connections and subsequent packages
		jump connections
		# Pings to subnet or responses to pings from subnet are seen as traceroute operations
		ip protocol icmp icmp type echo-request ip daddr 192.168.2.0/24 meta secmark set "tracert_client"
		ip protocol icmp icmp type echo-reply ip daddr 192.168.2.0/24 meta secmark set "tracert_server"
		# Logging for debugging
		tcp sport ssh limit rate 10/second log flags all prefix "[SECMARK TEST]"
		udp sport ssh limit rate 10/second log flags all prefix "[SECMARK TEST]"
		sctp sport { ssh } limit rate 10/second log flags all prefix "[SECMARK TEST]"
		tcp dport { http, https, 53, 853, ntp, 8080 } limit rate 10/second log flags all prefix "[SECMARK TEST]"
		udp dport { http, https, 53, 853, ntp, 8080 } limit rate 10/second log flags all prefix "[SECMARK TEST]"
		sctp dport { http, https, 8080 } limit rate 10/second log flags all prefix "[SECMARK TEST]"
		ip protocol icmp icmp type { echo-request, echo-reply } ip daddr 192.168.2.0/24 limit rate 10/second log flags all prefix "[SECMARK TEST]"
	}
	chain connections {
		# Define SECMARK of connection as the one of the connection's first packet
		ct state new ct secmark set meta secmark
		# Define SECMARK of all subsequent packets of a connection as the SECMARK of the connection / first packet
		ct state established,related meta secmark set ct secmark
	}
}

